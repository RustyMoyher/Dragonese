#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

print 'loading _multiedit module'

release = Key("shift:up, ctrl:up")
R = Key("shift:up, ctrl:up")

def T(s, pause=0.00001, **kws):
    return Text(s, pause=pause, **kws)

def K(*args, **kws):
    return Key(*args, **kws)

#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object

           "up [<n>]":                         Key("up:%(n)d"),
           "down [<n>]":                       Key("down:%(n)d"),
           "left [<n>]":                       Key("left:%(n)d"),
           "right [<n>]":                      Key("right:%(n)d"),
           "page up [<n>]":                    Key("pgup:%(n)d"),
           "page down [<n>]":                  Key("pgdown:%(n)d"),
           "up <n> (page | pages)":            Key("pgup:%(n)d"),
           "down <n> (page | pages)":          Key("pgdown:%(n)d"),
           "left <n> (word | words)":          Key("c-left:%(n)d"),
           "right <n> (word | words)":         Key("c-right:%(n)d"),
           "home":                             Key("home"),
           "end":                              Key("end"),
           "doc home":                         Key("c-home"),
           "doc end":                          Key("c-end"),

           "space [<n>]":                      release + Key("space:%(n)d"),
           "enter [<n>]":                      release + Key("enter:%(n)d"),
           "tab [<n>]":                        Key("tab:%(n)d"),
           "delete [<n>]":                     release + Key("del:%(n)d"),
           "delete [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
           "backspace [<n>]":                  release + Key("backspace:%(n)d"),
           "pop up":                           release + Key("apps"),

           "duplicate <n>":                    release + Key("c-c, c-v:%(n)d"),
           "[hold] shift":                     Key("shift:down"),
           "release shift":                    Key("shift:up"),
           "[hold] control":                   Key("ctrl:down"),
           "release control":                  Key("ctrl:up"),
           "release [all]":                    release,

           #"say <text>":                       release + Text("%(text)s"),
           "mimic <text>":                     release + Mimic(extra="text"),

           "[<n>] slap":                       release + Key("enter:%(n)d"),
           "cot":                              release + Key("c-c"),
           "pat":                              release + Key("c-v"),

           "hive":                             Key("hyphen"),
           "quote":                            Key("quote"),
           "percent":                          Key("percent"),
           "coat":                             Key("comma"),
           "plus":                             Key("plus"),
           "(equal | equals)":                 Key("equal"),

           "snap":                             Key("home"), # go to beg of this line
           "youl":                             Key("end"),  # go to end of this line
           "snup":                             Key("up, home"), # go to beg of previous line
           "sna-down":                         Key("down, home"), # go to beg of next line
           "dowl":                             Key("down, end"), # go to end of next line

           #"dar":                              release + Key("del"), # delete forward
           "[<n>] (dar | rook)":               release + Key("del:%(n)d"), # delete forward
           "[<n>] chook":                      release + Key("backspace:%(n)d"), # delete forward

           "bard":                             release + Key("c-left"),                   # go to previous word
           "nord":                             release + Key("c-right, c-right, c-left"), # go to next word
           
           "lait":                             Key('lparen'),
           "rait":                             Key('rparen'),
           "lace":                             Key('lbrace'),
           "race":                             Key('rbrace'),
           "lack":                             Key('lbracket'),
           "rack":                             Key('rbracket'),

           "rang": Text(">")
          , "greater than": Text(" > ")
          , "lang": Text("<")
          , "(triple arrow | tri-lang)": Text(" <<< ")
          , "less than": Text(" < ")
          , "lat": Text("@")

          , "hash": K("hash")
          #, "g-equal": T(" >= ")
          #, "l-equal": Text(" <= ")
          , "minus-equal": Text(" -= ")
          , "plus-equal": Text(" += ")
          , "star-equal": Text(" *= ")
          , "minus-minus": Text("--")
          , "plus-plus": Text("++")
          , "equal": Text(" = ")
          , "double-equal": Text(" == ")
          , "(not-equal | nequal)": Text(" != ")
          , "logical-and": Text(" && ")
          , "logical-or": Text(" || ")
          , "left-shift": Text(" << ")
          , "right-shift": Text(" >> ")
          , "(colon|coal)": K("colon")
          , "(semi colon|sem-col|sem-coal)": T(";")

          # Visual Studio specific
          , "prep": K("f6")
          , "run": K("f5")
          , "rerun": K("cs-f5")
          , "stop-run": K("s-f5")
          , "rat": K("c-f6")
          , "lat": K("cs-f6")
          , "swit": K("csa-up")
          , "line [<n>]": K("c-g") + T("%(n)d\n") + K("enter")
          , "find": K("c-f")
          , "replace": K("c-h")
          #, "jump-def": K("f12")
          , "jump-dec": K("c-f12")
          , "fort": K("c-k,c-f")
          , "add-to-header": R + Key("c-e, u, end, lparen, rparen, c-c, csa-up, c-end, up, up, up, end, enter, c-v, up, home, tab, c-right, cs-right, cs-right, del, end") +  T(";") + K("down,cs-l")
          , "add-full-header": R + Key("c-e, u, end, c-c, csa-up, c-end, up, up, up, end, enter, c-v, up, home, tab, c-right, cs-right, cs-right, del, end") +  T(";") + K("down,cs-l")
          , "pot": T("->")
          , "fex": K("f3")
          , "bex": K("s-f3")
          , "nulp": T("nullptr")
          , "comp": K("c-space")

          ## operations on lines
          , "yank": K("c-l")
          , "(slurp | kill line)": K("cs-l")
          , "select-down [<n>]": K("s-down:%(n)d")
          , "select-right": K("s-end")
          , "select-left": K("s-home")
          , "select-word-right": K("cs-right")
          , "select-word-left": K("cs-left")


          ## operations on words
          , "(cut-word | yank-word)": K("cs-w, c-x")
          , "copy-word": K("cs-w, c-c, escape")
          , "slurp-word": K("cs-w, del")

          ## HMC Commands
          , "cent": K("cs-c")
          , "mock": K("cs-s") 
          , "click": Mouse("left")
          , "fit": Mouse("left")
          , "fik": Mouse("left") + Mouse("left")
          , "rit": Mouse("right")

          ## common programming words
          , "int": T("int")
          , "float": T("float")
          , "bool": T("bool")
          , "Vek": T("Vec2")
          , "bang": T("!")
          , "hash-include" : T("#include \"")
          , "cocoa" : T("cocos2d-x")
          , "cocos" : T("cocos2d-x")

          ,

           "comment":                          release + Key("c-k,c-c"),
           "Tom":                              release + Key("c-k,c-u"),

           "Aff":                              Key('a'),
           "(Brav | Bravo)":                   Key('b'),
           "Cai":                              Key('c'),
           "(Doy | Delt | Delta)":             Key('d'),
           "(Eck | Echo)":                     Key('e'),
           "Fay":                              Key('f'),
           "Goff":                             Key('g'),
           "Hoop":                             Key('h'),
           "Ish":                              Key('i'),
           "Jo":                               Key('j'),
           "Keel":                             Key('k'),
           "(Lee | Lima)":                     Key('l'),
           "Mike":                             Key('m'),
           "Noy":                              Key('n'),
           "(Osh | Osc)":                      Key('o'),
           "(Pui | Pom)":                      Key('p'),
           "(Queen | Quebec)":                 Key('q'),
           "Ree":                              Key('r'),
           "Soi":                              Key('s'),
           "Tay":                              Key('t'),
           "(Uni | Umm)":                      Key('u'),
           "Van":                              Key('v'),
           "Wes":                              Key('w'),
           "Xanth | Zan":                      Key('x'),
           "Yaa":                              Key('y'),
           "(Zul | Zulu)":                     Key('z'),

           "[<n>] nut":                        release + Key("%(n)d"),
           "[<n>] float":                      release + Key("%(n)d") + T(".0f"),
           "zero-nut":                         release + Key('0'),
           "zero-float":                       release + Key('0') + T(".0f"),

           # Already part of DNS 
           # "slash"                             /
           # "star"                              *
           # "space"
           # "caret"                             ^
           # To be added
           # "mark"                             set-selection-mark
           # "tark"                             toggle-selection-mark
           # "jark"                             jump-to-prev-mark
           # "mara":                            mark-paragraph 
           # "mexp"                             mark-sexp (select this function)
           # "boof"                             beg-of-prev-string
           # "baif"                             beg-of-next-string           
           # "moof"                             select-prev-string
           # "maif"                             select-next-string
           # "sup"                              <incremental serach up>

           # "snap [<n>]"                        go to beginning of line X
           # "jesp"                             go to beginning a function
           # "dword"                             delete this word
           # "slam"
           # "parallels"                        show parallels

          }


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some.words
def format_dot_word(dictation):
   """ dot word <dictation> """
   text = str(dictation)
   return ".".join(text.split(" "))

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(text.split(" ")) + "()"

# Format: some_words()
def format_under_function(dictation):
    """ jive <dictation> """
    text = str(dictation)
    return "-".join(text.split(" "))

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: someWords
def format_camel(dictation):
    """camel <dictation>"""
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

# Format: someWords()
def format_cam_func(dictation):
    """ cam func <dictation> """
    text = str(dictation)
    
    def camelcase(): 
        yield str.lower
        while True:
            yield str.capitalize
    
    c = camelcase()
    return "".join(c.next()(x) for x in text.split()) + "()"

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)
